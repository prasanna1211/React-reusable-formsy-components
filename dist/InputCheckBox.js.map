{"version":3,"sources":["../lib/InputCheckBox.js"],"names":["InputCheckBox","props","state","value","onChangeInput","bind","setValue","nextProps","setState","prevProps","prevState","errorMessageStyle","inline","display","wrapperClass","wrapperStyle","name","ref","fieldClass","getValue","required","fieldStyle","displayName","errorClass","getErrorMessage","Component","propTypes","PropTypes","string","isRequired","any","func","bool","object","defaultProps","validations","undefined","validationError"],"mappings":";;;;;;;;;;AAIA;;;;AACA;;;;;;;;+eALA;;;;;;IAOMA,a;;;AAEJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8HACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,aAAO,MAAKF,KAAL,CAAWE;AADP,KAAb;;AAIA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,OAArB;AANiB;AAOlB;;AAED;;;;;wCACoB;AAClB,WAAKJ,KAAL,CAAWK,QAAX,CAAoB,KAAKL,KAAL,CAAWE,KAA/B;AACD;;AAED;;;;8CAC0BI,S,EAAW;AACnC,UAAIA,UAAUJ,KAAV,KAAoB,KAAKF,KAAL,CAAWE,KAAnC,EAA0C;AACxC,aAAKK,QAAL,CAAc;AACZL,iBAAOI,UAAUJ;AADL,SAAd;AAGD;AACF;;AAED;;;;uCACmBM,S,EAAWC,S,EAAW;AAAE;AACzC,UAAI,KAAKR,KAAL,CAAWC,KAAX,KAAqBO,UAAUP,KAAnC,EAA0C;AACxC,aAAKF,KAAL,CAAWK,QAAX,CAAoB,KAAKJ,KAAL,CAAWC,KAA/B;AACA,aAAKF,KAAL,CAAWG,aAAX,CAAyB,KAAKF,KAAL,CAAWC,KAApC;AACD;AACF;;AAED;;;;oCACgB;AACd,WAAKK,QAAL,CAAc;AACZL,eAAO,CAAC,KAAKD,KAAL,CAAWC;AADP,OAAd;AAGD;;;6BAEQ;AACP;AACA,UAAMQ,oBAAoB,KAAKV,KAAL,CAAWW,MAAX,GAAoB,EAAEC,SAAS,cAAX,EAApB,GAAkD,IAA5E;AACA,aACE;AAAA;AAAA;AACE,qBAAW,KAAKZ,KAAL,CAAWa,YADxB;AAEE,iBAAO,KAAKb,KAAL,CAAWc;AAFpB;AAIE;AAAA;AAAA;AACE,qBAAS,KAAKd,KAAL,CAAWe;AADtB;AAGE,8DACM,uCAAc,KAAKf,KAAnB,CADN;AAEE,kBAAK,UAFP;AAGE,iBAAK,KAAKA,KAAL,CAAWgB,GAHlB;AAIE,uBAAW,KAAKhB,KAAL,CAAWiB,UAJxB;AAKE,kBAAM,KAAKjB,KAAL,CAAWe,IALnB;AAME,qBAAS,KAAKf,KAAL,CAAWkB,QAAX,MAAyB,KANpC;AAOE,sBAAU,KAAKf,aAPjB;AAQE,sBAAU,KAAKH,KAAL,CAAWmB,QARvB;AASE,mBAAO,KAAKnB,KAAL,CAAWoB;AATpB,aAHF;AAcG,eAAKpB,KAAL,CAAWqB;AAdd,SAJF;AAoBE;AAAA;AAAA,YAAK,WAAW,KAAKrB,KAAL,CAAWsB,UAA3B,EAAuC,OAAOZ,iBAA9C;AACI,eAAKV,KAAL,CAAWuB,eAAX;AADJ;AApBF,OADF;AA0BD;;;;EArEyB,gBAAMC,S;;AAwElCzB,cAAc0B,SAAd,GAA0B;AACxBV,QAAM,gBAAMW,SAAN,CAAgBC,MAAhB,CAAuBC,UADL;AAExB1B,SAAO,gBAAMwB,SAAN,CAAgBG,GAFC;AAGxBhB,gBAAc,gBAAMa,SAAN,CAAgBC,MAHN;AAIxBV,cAAY,gBAAMS,SAAN,CAAgBC,MAJJ;AAKxBxB,iBAAe,gBAAMuB,SAAN,CAAgBI,IALP;AAMxBX,YAAU,gBAAMO,SAAN,CAAgBK,IANF;AAOxB1B,YAAU,gBAAMqB,SAAN,CAAgBI,IAAhB,CAAqBF,UAPP;AAQxBd,gBAAc,gBAAMY,SAAN,CAAgBM,MARN;AASxBZ,cAAY,gBAAMM,SAAN,CAAgBM,MATJ;AAUxBrB,UAAQ,gBAAMe,SAAN,CAAgBK,IAVA;AAWxBR,mBAAiB,gBAAMG,SAAN,CAAgBI,IAAhB,CAAqBF,UAXd;AAYxBZ,OAAK,gBAAMU,SAAN,CAAgBC,MAZG;AAaxBT,YAAU,gBAAMQ,SAAN,CAAgBI,IAAhB,CAAqBF,UAbP;AAcxBP,eAAa,gBAAMK,SAAN,CAAgBC,MAAhB,CAAuBC,UAdZ;AAexBN,cAAY,gBAAMI,SAAN,CAAgBC;AAfJ,CAA1B;;AAkBA5B,cAAckC,YAAd,GAA6B;AAC3B/B,SAAO,KADoB;AAE3BW,gBAAc,EAFa;AAG3BI,cAAY,EAHe;AAI3Bd,iBAAe,yBAAM,CAAE,CAJI;AAK3B+B,eAAaC,SALc;AAM3BhB,YAAUgB,SANiB;AAO3BrB,gBAAcqB,SAPa;AAQ3Bf,cAAYe,SARe;AAS3BxB,UAAQwB,SATmB;AAU3BC,mBAAiBD,SAVU;AAW3BnB,OAAK,EAXsB;AAY3BM,cAAYa;AAZe,CAA7B;;kBAeepC,a","file":"InputCheckBox.js","sourcesContent":["/**\n * Input Text Box ( <input type = \"text>\")\n * Both formsy value and display value will change by changing the state value\n */\nimport React from 'react';\nimport { pickHTMLProps } from 'pick-react-known-prop';\n\nclass InputCheckBox extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: this.props.value,\n    };\n\n    this.onChangeInput = this.onChangeInput.bind(this);\n  }\n\n  // Setting the default value\n  componentDidMount() {\n    this.props.setValue(this.props.value);\n  }\n\n  // When new value is recieved forecefully update the state\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({\n        value: nextProps.value,\n      });\n    }\n  }\n\n  // only when there is state change, change formsy and display value to be changed\n  componentDidUpdate(prevProps, prevState) { // eslint-disable-line\n    if (this.state.value !== prevState.value) {\n      this.props.setValue(this.state.value);\n      this.props.onChangeInput(this.state.value);\n    }\n  }\n\n  // On typing, change the state\n  onChangeInput() {\n    this.setState({\n      value: !this.state.value,\n    });\n  }\n\n  render() {\n    // inline or block based on the props\n    const errorMessageStyle = this.props.inline ? { display: 'inline-block' } : null;\n    return (\n      <div\n        className={this.props.wrapperClass}\n        style={this.props.wrapperStyle}\n      >\n        <label\n          htmlFor={this.props.name}\n        >\n          <input\n            {...pickHTMLProps(this.props)}\n            type=\"checkbox\"\n            ref={this.props.ref}\n            className={this.props.fieldClass}\n            name={this.props.name}\n            checked={this.props.getValue() || false}\n            onChange={this.onChangeInput}\n            required={this.props.required}\n            style={this.props.fieldStyle}\n          />\n          {this.props.displayName}\n        </label>\n        <div className={this.props.errorClass} style={errorMessageStyle}>\n          { this.props.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n\nInputCheckBox.propTypes = {\n  name: React.PropTypes.string.isRequired,\n  value: React.PropTypes.any,\n  wrapperClass: React.PropTypes.string,\n  fieldClass: React.PropTypes.string,\n  onChangeInput: React.PropTypes.func,\n  required: React.PropTypes.bool,\n  setValue: React.PropTypes.func.isRequired,\n  wrapperStyle: React.PropTypes.object,\n  fieldStyle: React.PropTypes.object,\n  inline: React.PropTypes.bool,\n  getErrorMessage: React.PropTypes.func.isRequired,\n  ref: React.PropTypes.string,\n  getValue: React.PropTypes.func.isRequired,\n  displayName: React.PropTypes.string.isRequired,\n  errorClass: React.PropTypes.string,\n};\n\nInputCheckBox.defaultProps = {\n  value: false,\n  wrapperClass: '',\n  fieldClass: '',\n  onChangeInput: () => {},\n  validations: undefined,\n  required: undefined,\n  wrapperStyle: undefined,\n  fieldStyle: undefined,\n  inline: undefined,\n  validationError: undefined,\n  ref: '',\n  errorClass: undefined,\n};\n\nexport default InputCheckBox;\n"]}
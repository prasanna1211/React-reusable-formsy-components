{"version":3,"sources":["../lib/InputRadioButton.js"],"names":["InputRadioButton","props","state","value","onChangeInput","bind","renderRadioButtons","setValue","nextProps","isValuePristine","setState","nextState","isEqual","prevProps","prevState","name","options","newThis","radioButtons","map","option","fieldClass","required","fieldStyle","displayName","console","log","errorMessageStyle","inline","display","wrapperClass","wrapperStyle","labelClass","label","errorClass","getErrorMessage","Component","propTypes","PropTypes","string","isRequired","any","array","func","bool","object","ref","getValue","defaultProps","undefined","validations","validationError"],"mappings":"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","file":"InputRadioButton.js","sourcesContent":["/**\n * Input Text Box ( <input type = \"text>\")\n * Both formsy value and display value will change by changing the state value\n */\nimport React from 'react';\nimport { pickHTMLProps } from 'pick-react-known-prop';\nimport _ from 'underscore';\n\nclass InputRadioButton extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n    };\n\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.renderRadioButtons = this.renderRadioButtons.bind(this);\n  }\n\n  // Setting the default value\n  componentDidMount() {\n    this.props.setValue(this.props.value);\n  }\n\n  // When new value is recieved forecefully update the state\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value || nextProps.isValuePristine) { // eslint-disable-line\n      this.setState({\n        value: nextProps.value,\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !_.isEqual(this.state.value, nextState.value);\n  }\n\n  // only when there is state change, change formsy and display value to be changed\n  componentDidUpdate(prevProps, prevState) { // eslint-disable-line\n    if (this.state.value !== prevState.value) {\n      this.props.setValue(this.state.value);\n      this.props.onChangeInput(this.props.name, this.state.value);\n    }\n  }\n\n  // On typing, change the state\n  onChangeInput(value) {\n    this.setState({\n      value,\n    });\n  }\n\n  // Renders the radio buttons\n  renderRadioButtons(options) {\n    const newThis = this;\n    const radioButtons = _.map(options, (option) => {\n      return (\n        <label key={option.name} htmlFor={option.name}>\n          <input\n            {...pickHTMLProps(newThis.props)}\n            type=\"radio\"\n            checked={newThis.state.value === option.value}\n            className={newThis.props.fieldClass}\n            name={newThis.props.name}\n            onChange={() => { this.onChangeInput(option.value); }}\n            required={newThis.props.required}\n            style={newThis.props.fieldStyle}\n          />\n          {option.displayName}\n        </label>\n      );\n    });\n    return radioButtons;\n  }\n\n  render() {\n    // inline or block based on the props\n    console.log(' rendered radio button ', this.state.value);\n    const errorMessageStyle = this.props.inline ? { display: 'inline-block' } : null;\n    return (\n      <div\n        className={this.props.wrapperClass}\n        style={this.props.wrapperStyle}\n      >\n        <label\n          htmlFor={this.props.name}\n          className={this.props.labelClass}\n        >\n          {this.props.label}\n        </label>\n        {this.renderRadioButtons(this.props.options)}\n        <div className={this.props.errorClass} style={errorMessageStyle}>\n          { this.props.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n\nInputRadioButton.propTypes = {\n  name: React.PropTypes.string.isRequired,          //eslint-disable-line\n  value: React.PropTypes.any,\n  options: React.PropTypes.array.isRequired,\n  wrapperClass: React.PropTypes.string,\n  fieldClass: React.PropTypes.string,               //eslint-disable-line\n  onChangeInput: React.PropTypes.func,\n  required: React.PropTypes.bool,                   //eslint-disable-line\n  setValue: React.PropTypes.func.isRequired,\n  wrapperStyle: React.PropTypes.object,\n  fieldStyle: React.PropTypes.object,               //eslint-disable-line\n  inline: React.PropTypes.bool,\n  getErrorMessage: React.PropTypes.func.isRequired,\n  ref: React.PropTypes.string,                      //eslint-disable-line\n  getValue: React.PropTypes.func.isRequired,        //eslint-disable-line\n  errorClass: React.PropTypes.string,\n  label: React.PropTypes.string,\n  labelClass: React.PropTypes.string,\n};\n\nInputRadioButton.defaultProps = {\n  value: undefined,\n  wrapperClass: undefined,\n  fieldClass: undefined,\n  onChangeInput: () => {},\n  validations: undefined,\n  required: undefined,\n  wrapperStyle: undefined,\n  fieldStyle: undefined,\n  inline: undefined,\n  validationError: undefined,\n  ref: '',\n  errorClass: undefined,\n  label: undefined,\n  labelClass: undefined,\n};\n\nexport default InputRadioButton;\n"]}
{"version":3,"sources":["../lib/InputRadioButton.js"],"names":["InputRadioButton","props","state","value","onChangeInput","bind","renderRadioButtons","setValue","nextProps","setState","prevProps","prevState","options","newThis","radioButtons","map","option","name","getValue","ref","fieldClass","required","fieldStyle","displayName","errorMessageStyle","inline","display","wrapperClass","wrapperStyle","getErrorMessage","Component","propTypes","PropTypes","string","isRequired","any","array","func","bool","object","defaultProps","undefined","validations","validationError"],"mappings":"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","file":"InputRadioButton.js","sourcesContent":["/**\n * Input Text Box ( <input type = \"text>\")\n * Both formsy value and display value will change by changing the state value\n */\nimport React from 'react';\nimport { pickHTMLProps } from 'pick-react-known-prop';\nimport _ from 'underscore';\n\nclass InputRadioButton extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n    };\n\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.renderRadioButtons = this.renderRadioButtons.bind(this);\n  }\n\n  // Setting the default value\n  componentDidMount() {\n    this.props.setValue(this.props.value);\n  }\n\n  // When new value is recieved forecefully update the state\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({\n        value: nextProps.value,\n      });\n    }\n  }\n\n  // only when there is state change, change formsy and display value to be changed\n  componentDidUpdate(prevProps, prevState) { // eslint-disable-line\n    if (this.state.value !== prevState.value) {\n      this.props.setValue(this.state.value);\n      this.props.onChangeInput();\n    }\n  }\n\n  // On typing, change the state\n  onChangeInput(value) {\n    this.setState({\n      value,\n    });\n  }\n\n  // Renders the radio buttons\n  renderRadioButtons(options) {\n    const newThis = this;\n    const radioButtons = _.map(options, (option) => {\n      return (\n        <label key={option.name} htmlFor={option.name}>\n          <input\n            {...pickHTMLProps(newThis.props)}\n            type=\"radio\"\n            checked={newThis.props.getValue() === option.value}\n            ref={newThis.props.ref}\n            className={newThis.props.fieldClass}\n            name={newThis.props.name}\n            onChange={() => { this.onChangeInput(option.value); }}\n            required={newThis.props.required}\n            style={newThis.props.fieldStyle}\n          />\n          {option.displayName}\n        </label>\n      );\n    });\n    return radioButtons;\n  }\n\n  render() {\n    // inline or block based on the props\n    const errorMessageStyle = this.props.inline ? { display: 'inline-block' } : null;\n    return (\n      <div\n        className={this.props.wrapperClass}\n        style={this.props.wrapperStyle}\n      >\n        {this.renderRadioButtons(this.props.options)}\n        <div className=\"error-message\" style={errorMessageStyle}>\n          { this.props.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n\nInputRadioButton.propTypes = {\n  name: React.PropTypes.string.isRequired,          //eslint-disable-line\n  value: React.PropTypes.any,\n  options: React.PropTypes.array.isRequired,\n  wrapperClass: React.PropTypes.string,\n  fieldClass: React.PropTypes.string,               //eslint-disable-line\n  onChangeInput: React.PropTypes.func,\n  required: React.PropTypes.bool,                   //eslint-disable-line\n  setValue: React.PropTypes.func.isRequired,\n  wrapperStyle: React.PropTypes.object,\n  fieldStyle: React.PropTypes.object,               //eslint-disable-line\n  inline: React.PropTypes.bool,\n  getErrorMessage: React.PropTypes.func.isRequired,\n  ref: React.PropTypes.string,                      //eslint-disable-line\n  getValue: React.PropTypes.func.isRequired,        //eslint-disable-line\n};\n\nInputRadioButton.defaultProps = {\n  value: 'undefined',\n  wrapperClass: undefined,\n  fieldClass: '',\n  onChangeInput: () => {},\n  validations: undefined,\n  required: undefined,\n  wrapperStyle: undefined,\n  fieldStyle: undefined,\n  inline: undefined,\n  validationError: undefined,\n  ref: '',\n};\n\nexport default InputRadioButton;\n"]}
{"version":3,"sources":["../lib/InputRadioButton.js"],"names":["InputRadioButton","props","state","value","onChangeInput","bind","renderRadioButtons","setValue","nextProps","isValuePristine","setState","prevProps","prevState","name","options","newThis","radioButtons","map","option","getValue","ref","fieldClass","required","fieldStyle","displayName","errorMessageStyle","inline","display","wrapperClass","wrapperStyle","errorClass","getErrorMessage","Component","propTypes","PropTypes","string","isRequired","any","array","func","bool","object","defaultProps","undefined","validations","validationError"],"mappings":"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","file":"InputRadioButton.js","sourcesContent":["/**\n * Input Text Box ( <input type = \"text>\")\n * Both formsy value and display value will change by changing the state value\n */\nimport React from 'react';\nimport { pickHTMLProps } from 'pick-react-known-prop';\nimport _ from 'underscore';\n\nclass InputRadioButton extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n    };\n\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.renderRadioButtons = this.renderRadioButtons.bind(this);\n  }\n\n  // Setting the default value\n  componentDidMount() {\n    this.props.setValue(this.props.value);\n  }\n\n  // When new value is recieved forecefully update the state\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value || nextProps.isValuePristine) { // eslint-disable-line\n      this.setState({\n        value: nextProps.value,\n      });\n    }\n  }\n\n  // only when there is state change, change formsy and display value to be changed\n  componentDidUpdate(prevProps, prevState) { // eslint-disable-line\n    if (this.state.value !== prevState.value) {\n      this.props.setValue(this.state.value);\n      this.props.onChangeInput(this.props.name, this.state.value);\n    }\n  }\n\n  // On typing, change the state\n  onChangeInput(value) {\n    this.setState({\n      value,\n    });\n  }\n\n  // Renders the radio buttons\n  renderRadioButtons(options) {\n    const newThis = this;\n    const radioButtons = _.map(options, (option) => {\n      return (\n        <label key={option.name} htmlFor={option.name}>\n          <input\n            {...pickHTMLProps(newThis.props)}\n            type=\"radio\"\n            checked={newThis.props.getValue() === option.value}\n            ref={newThis.props.ref}\n            className={newThis.props.fieldClass}\n            name={newThis.props.name}\n            onChange={() => { this.onChangeInput(option.value); }}\n            required={newThis.props.required}\n            style={newThis.props.fieldStyle}\n          />\n          {option.displayName}\n        </label>\n      );\n    });\n    return radioButtons;\n  }\n\n  render() {\n    // inline or block based on the props\n    const errorMessageStyle = this.props.inline ? { display: 'inline-block' } : null;\n    return (\n      <div\n        className={this.props.wrapperClass}\n        style={this.props.wrapperStyle}\n      >\n        {this.renderRadioButtons(this.props.options)}\n        <div className={this.props.errorClass} style={errorMessageStyle}>\n          { this.props.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n\nInputRadioButton.propTypes = {\n  name: React.PropTypes.string.isRequired,          //eslint-disable-line\n  value: React.PropTypes.any,\n  options: React.PropTypes.array.isRequired,\n  wrapperClass: React.PropTypes.string,\n  fieldClass: React.PropTypes.string,               //eslint-disable-line\n  onChangeInput: React.PropTypes.func,\n  required: React.PropTypes.bool,                   //eslint-disable-line\n  setValue: React.PropTypes.func.isRequired,\n  wrapperStyle: React.PropTypes.object,\n  fieldStyle: React.PropTypes.object,               //eslint-disable-line\n  inline: React.PropTypes.bool,\n  getErrorMessage: React.PropTypes.func.isRequired,\n  ref: React.PropTypes.string,                      //eslint-disable-line\n  getValue: React.PropTypes.func.isRequired,        //eslint-disable-line\n  errorClass: React.PropTypes.string,\n};\n\nInputRadioButton.defaultProps = {\n  value: 'undefined',\n  wrapperClass: undefined,\n  fieldClass: '',\n  onChangeInput: () => {},\n  validations: undefined,\n  required: undefined,\n  wrapperStyle: undefined,\n  fieldStyle: undefined,\n  inline: undefined,\n  validationError: undefined,\n  ref: '',\n  errorClass: undefined,\n};\n\nexport default InputRadioButton;\n"]}
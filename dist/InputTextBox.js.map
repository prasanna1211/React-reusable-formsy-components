{"version":3,"sources":["../lib/InputTextBox.js"],"names":["InputTextBox","props","state","value","onChangeInput","bind","setValue","nextProps","isValuePristine","setState","prevProps","prevState","name","event","target","errorMessageStyle","inline","display","wrapperClass","wrapperStyle","labelClass","label","ref","fieldClass","getValue","required","fieldStyle","errorClass","getErrorMessage","Component","propTypes","PropTypes","string","isRequired","any","func","bool","object","defaultProps","undefined","validations","validationError"],"mappings":"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","file":"InputTextBox.js","sourcesContent":["/**\n * Input Text Box ( <input type = \"text>\")\n * Both formsy value and display value will change by changing the state value\n */\nimport React from 'react';\nimport { pickHTMLProps } from 'pick-react-known-prop';\n\nclass InputTextBox extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: this.props.value,\n    };\n\n    this.onChangeInput = this.onChangeInput.bind(this);\n  }\n\n  // Setting the default value\n  componentDidMount() {\n    this.props.setValue(this.props.value);\n  }\n\n  // When new value is recieved forecefully update the state\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value || nextProps.isValuePristine) { // eslint-disable-line\n      this.setState({\n        value: nextProps.value,\n      });\n    }\n  }\n\n  // only when there is state change, change formsy and display value to be changed\n  componentDidUpdate(prevProps, prevState) { // eslint-disable-line\n    if (this.state.value !== prevState.value) {\n      this.props.setValue(this.state.value);\n      this.props.onChangeInput(this.props.name, this.state.value);\n    }\n  }\n\n  // On typing, change the state\n  onChangeInput(event) {\n    this.setState({\n      value: event.target.value,\n    });\n  }\n\n  render() {\n    // inline or block based on the props\n    const errorMessageStyle = this.props.inline ? { display: 'inline-block' } : null;\n    return (\n      <div\n        className={this.props.wrapperClass}\n        style={this.props.wrapperStyle}\n      >\n        <label\n          htmlFor={this.props.name}\n          className={this.props.labelClass}\n        >\n          {this.props.label}\n        </label>\n        <input\n          {...pickHTMLProps(this.props)}\n          type=\"text\"\n          ref={this.props.ref}\n          className={this.props.fieldClass}\n          name={this.props.name}\n          value={this.props.getValue()}\n          onChange={this.onChangeInput}\n          required={this.props.required}\n          style={this.props.fieldStyle}\n        />\n        <div className={this.props.errorClass} style={errorMessageStyle}>\n          { this.props.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n\nInputTextBox.propTypes = {\n  name: React.PropTypes.string.isRequired,\n  value: React.PropTypes.any,\n  wrapperClass: React.PropTypes.string,\n  fieldClass: React.PropTypes.string,\n  errorClass: React.PropTypes.string,\n  onChangeInput: React.PropTypes.func,\n  required: React.PropTypes.bool,\n  setValue: React.PropTypes.func.isRequired,\n  wrapperStyle: React.PropTypes.object,\n  fieldStyle: React.PropTypes.object,\n  inline: React.PropTypes.bool,\n  getErrorMessage: React.PropTypes.func.isRequired,\n  ref: React.PropTypes.string,\n  getValue: React.PropTypes.func.isRequired,\n  label: React.PropTypes.string,\n  labelClass: React.PropTypes.string,\n};\n\nInputTextBox.defaultProps = {\n  value: undefined,\n  wrapperClass: '',\n  fieldClass: '',\n  onChangeInput: () => {},\n  validations: undefined,\n  required: undefined,\n  wrapperStyle: undefined,\n  fieldStyle: undefined,\n  inline: undefined,\n  validationError: undefined,\n  ref: '',\n  errorClass: undefined,\n  label: undefined,\n  labelClass: undefined,\n};\n\nexport default InputTextBox;\n\n"]}
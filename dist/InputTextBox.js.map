{"version":3,"sources":["../lib/InputTextBox.js"],"names":["InputTextBox","props","state","value","onChangeInput","bind","setValue","nextProps","setState","prevProps","prevState","event","target","errorMessageStyle","inline","display","wrapperClass","wrapperStyle","ref","fieldClass","name","getValue","required","fieldStyle","getErrorMessage","Component","propTypes","PropTypes","string","isRequired","any","func","bool","object","defaultProps","undefined","validations","validationError"],"mappings":"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","file":"InputTextBox.js","sourcesContent":["/**\n * Input Text Box ( <input type = \"text>\")\n * Both formsy value and display value will change by changing the state value\n */\nimport React from 'react';\nimport { pickHTMLProps } from 'pick-react-known-prop';\n\nclass InputTextBox extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n    };\n\n    this.onChangeInput = this.onChangeInput.bind(this);\n  }\n\n  // Setting the default value\n  componentDidMount() {\n    this.props.setValue(this.props.value);\n  }\n\n  // When new value is recieved forecefully update the state\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({\n        value: nextProps.value,\n      });\n    }\n  }\n\n  // only when there is state change, change formsy and display value to be changed\n  componentDidUpdate(prevProps, prevState) { // eslint-disable-line\n    if (this.state.value !== prevState.value) {\n      this.props.setValue(this.state.value);\n      this.props.onChangeInput();\n    }\n  }\n\n  // On typing, change the state\n  onChangeInput(event) {\n    this.setState({\n      value: event.target.value,\n    });\n  }\n\n  render() {\n    const errorMessageStyle = this.props.inline ? { display: 'inline-block' } : null;\n    return (\n      <div\n        className={this.props.wrapperClass}\n        style={this.props.wrapperStyle}\n      >\n        <input\n          {...pickHTMLProps(this.props)}\n          type=\"text\"\n          ref={this.props.ref}\n          className={this.props.fieldClass}\n          name={this.props.name}\n          value={this.props.getValue()}\n          onChange={this.onChangeInput}\n          required={this.props.required}\n          style={this.props.fieldStyle}\n        />\n        <div className=\"error-message\" style={errorMessageStyle}>\n          { this.props.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n\nInputTextBox.propTypes = {\n  name: React.PropTypes.string.isRequired,\n  value: React.PropTypes.any,\n  wrapperClass: React.PropTypes.string,\n  fieldClass: React.PropTypes.string,\n  onChangeInput: React.PropTypes.func,\n  required: React.PropTypes.bool,\n  setValue: React.PropTypes.func.isRequired,\n  wrapperStyle: React.PropTypes.object,\n  fieldStyle: React.PropTypes.object,\n  inline: React.PropTypes.bool,\n  getErrorMessage: React.PropTypes.func.isRequired,\n  ref: React.PropTypes.string,\n  getValue: React.PropTypes.func.isRequired,\n};\n\nInputTextBox.defaultProps = {\n  value: undefined,\n  wrapperClass: '',\n  fieldClass: '',\n  onChangeInput: () => {},\n  validations: undefined,\n  required: undefined,\n  wrapperStyle: undefined,\n  fieldStyle: undefined,\n  inline: undefined,\n  validationError: undefined,\n  ref: '',\n};\n\nexport default InputTextBox;\n"]}
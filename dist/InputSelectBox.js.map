{"version":3,"sources":["../lib/InputSelectBox.js"],"names":["InputSelectBox","props","state","value","onChangeSelect","bind","setValue","nextProps","isValuePristine","setState","prevProps","prevState","onChangeInput","name","event","target","errorMessageStyle","inline","display","wrapperClass","wrapperStyle","selectClass","ref","getValue","required","disableDefaultTextOnSelect","defaultText","map","options","optionData","optionClass","errorClass","getErrorMessage","Component","propTypes","PropTypes","array","isRequired","string","object","func","any","bool","defaultProps","undefined"],"mappings":"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","file":"InputSelectBox.js","sourcesContent":["/**\n * Input Select Box ( <select></select>\")\n * Both formsy value and display value will change by changing the state value\n */\nimport React from 'react';\nimport { pickHTMLProps } from 'pick-react-known-prop';\nimport _ from 'underscore';\n\nclass InputSelectBox extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n    };\n\n    this.onChangeSelect = this.onChangeSelect.bind(this);\n  }\n\n  // Setting the default value\n  componentDidMount() {\n    this.props.setValue(this.props.value);\n  }\n\n  // When new value is recieved forecefully update the state\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value || nextProps.isValuePristine) { // eslint-disable-line\n      this.setState({\n        value: nextProps.value,\n      });\n    }\n  }\n\n  // only when there is state change, change formsy and display value to be changed\n  componentDidUpdate(prevProps, prevState) { // eslint-disable-line\n    if (this.state.value !== prevState.value) {\n      this.props.setValue(this.state.value);\n      this.props.onChangeInput(this.props.name, this.state.value);\n    }\n  }\n\n  // On changing sleect, change the state\n  onChangeSelect(event) {\n    this.setState({\n      value: event.target.value,\n    });\n  }\n\n  render() {\n    // inline or block based on the props\n    const errorMessageStyle = this.props.inline ? { display: 'inline-block' } : null;\n    return (\n      <div\n        className={this.props.wrapperClass}\n        style={this.props.wrapperStyle}\n      >\n        <select\n          {...pickHTMLProps(this.props)}\n          className={this.props.selectClass}\n          ref={this.props.ref}\n          name={this.props.name}\n          value={this.props.getValue()}\n          onChange={this.onChangeSelect}\n          required={this.props.required}\n        >\n          <option\n            key=\"selectOption\"\n            value=\"none\"\n            disabled={this.props.disableDefaultTextOnSelect}\n          >\n            {this.props.defaultText}\n          </option>\n          {\n            _.map(this.props.options, optionData => (\n              <option\n                key={optionData.value}\n                value={optionData.value}\n                className={this.props.optionClass}\n              >\n                {optionData.name}\n              </option>\n            ))\n          }\n        </select>\n        <div className={this.props.errorClass} style={errorMessageStyle}>\n          { this.props.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n\nInputSelectBox.propTypes = {\n  options: React.PropTypes.array.isRequired,\n  wrapperClass: React.PropTypes.string,\n  errorClass: React.PropTypes.string,\n  wrapperStyle: React.PropTypes.object,\n  getErrorMessage: React.PropTypes.func.isRequired,\n  getValue: React.PropTypes.func.isRequired,\n  value: React.PropTypes.any,\n  setValue: React.PropTypes.func.isRequired,\n  onChangeInput: React.PropTypes.func,\n  inline: React.PropTypes.bool,\n  ref: React.PropTypes.string,\n  name: React.PropTypes.string.isRequired,\n  required: React.PropTypes.bool,\n  disableDefaultTextOnSelect: React.PropTypes.bool,\n  defaultText: React.PropTypes.string,\n  selectClass: React.PropTypes.string,\n  optionClass: React.PropTypes.string,\n};\n\nInputSelectBox.defaultProps = {\n  wrapperClass: undefined,\n  wrapperStyle: undefined,\n  errorClass: undefined,\n  value: 'selectOption',\n  onChangeInput: () => {},\n  inline: undefined,\n  ref: undefined,\n  disableDefaultTextOnSelect: true,\n  required: undefined,\n  defaultText: 'Select An Option',\n  selectClass: '',\n  optionClass: '',\n};\n\nexport default InputSelectBox;\n"]}